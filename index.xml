<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Wandering World</title>
        <link>http://chinyu1229.github.io/</link>
        <description>About LoveIt Theme</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>chinyu0916@gmail.com (Chinyu)</managingEditor>
            <webMaster>chinyu0916@gmail.com (Chinyu)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 07 Sep 2021 23:11:12 &#43;0800</lastBuildDate>
            <atom:link href="http://chinyu1229.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>整數二分法 Binary Search</title>
    <link>http://chinyu1229.github.io/2021-9-7-%E4%BA%8C%E5%88%86%E6%B3%95/</link>
    <pubDate>Tue, 07 Sep 2021 23:11:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-9-7-%E4%BA%8C%E5%88%86%E6%B3%95/</guid>
    <description><![CDATA[整數二分 何時使用 有單調性（monotone)的一組數字可以二分，但沒有單調性也可以使用二分法
在何時適用 若可以找到某種性質，在右半邊滿足，左半邊不滿足(在右半邊不滿足，左半邊滿足)，就可以尋找邊界
模板code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  bool check(int x){/*stasify some conditions*/} // [l, r] -&gt; [l, mid] + [mid + 1, r] int bsearch1(int l, int r) { int mid = l + r &gt;&gt; 1; if(check(mid)) r = mid; else l = mid + 1; } // [l, r] -&gt; [l, mid - 1] + [mid, r] int bsearch2(int l, int r) { int mid = l + r + 1 &gt;&gt; 1; if(check(mid)) l = mid; else r = mid - 1; } return l; //also can return r   圖例與解釋 找尋紅色的邊界：check(mid) ：滿足紅色條件]]></description>
</item><item>
    <title>KMP算法 -- next解釋</title>
    <link>http://chinyu1229.github.io/2021-07-13-kmp%E7%AE%97%E6%B3%95/</link>
    <pubDate>Tue, 13 Jul 2021 17:40:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-07-13-kmp%E7%AE%97%E6%B3%95/</guid>
    <description><![CDATA[KMP 基本概念 一種用來字符串匹配的算法 一些定義：
 s[] 為主字串 ， p[] 是匹配串 ， 即可以理解成p是否是s的子字串 前綴：包含首位字符但不包含末位字符的子字串; 後綴：包含末位字符但不包含首位字符的子字串 部分匹配值 ： 前綴與後綴最長共有長度 next[] 存的是每個下標對應的部分匹配值   核心思考：每次匹配失敗時，把p串往後移動至next對應的值  next的含義與模擬 字串從1開始存，next[i], 是p[1,i]中前綴和後綴相同的最大長度（部分匹配值）， 定義 next[1] = 0 例如：
1 2 3  idx 1 2 3 4 5 6 str a b c a b a next 0 0 0 1 2 1   求next陣列的code
1 2 3 4 5 6 7  // m 為 p 的長度 for(int i = 2, j = 0; i &lt;= m; i++) { while(j &amp;&amp; p[i] !]]></description>
</item><item>
    <title>Linux Chapter 24 CreateProcess</title>
    <link>http://chinyu1229.github.io/2021-06-20-linux_chapter_24_createprocess/</link>
    <pubDate>Sun, 20 Jun 2021 17:13:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-06-20-linux_chapter_24_createprocess/</guid>
    <description><![CDATA[CreateProcess fork() exit() wait() execev() 簡介  fork()  parent process經由呼叫fork()建立一個 child process child獲得parent的stack segment、data segment、heap segment、text segment 可說是把parent process一分為二   exit()  terminate a process 將佔用的所有資源歸還給kernel parent 可以利用 wait()來取得結束的狀態(status)   wait()  若child process還未呼叫exit()，那wait()會suspend parent process，直到有任一child process terminated 可以取得status   execve()  Load a new program到目前process的記憶體 丟去現存的text segment 重新建立 stack segment、data segment、heap segment    大致流程圖
fork() 1 2 3  #include &lt;unistd.h&gt;pid_t fork(void); In parent: returns process ID of child on success, or –1 on error; in successfully created child: always returns 0    呼叫後將存在兩個process，且每個process都會從fork()的返回處繼續執行 兩個process擁有不同的stack segment、data segment、heap segment、text segment副本（child可以再修改，且不影響parent） 返回pid == 0是child process 返回pid !]]></description>
</item><item>
    <title>Backpack_Problem</title>
    <link>http://chinyu1229.github.io/2021-06-11-backpack-problem/</link>
    <pubDate>Thu, 10 Jun 2021 00:48:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-06-11-backpack-problem/</guid>
    <description><![CDATA[Backpack 0 - 1 Problem  主問題：從n個物品選一些物品，在不超過最大容量下，使得價值最大。 解空間：{x1,x2&hellip;.,xn}  xi : 0 or 1 (表示取或不取) 共有 $2^n$ 可能的解   限制條件： $\sum_{i=1}^n$ $w_ix_i$ &lt;= W 採用回溯法 限界條件：  對於任何一個中間節點z，從root到z的分支所代表的狀態已經確定，從z到子孫的節點還未確定。如果z在第t層，說明第1種物品到t-1種物品（是否裝入背包）確定，t可以沿著分支擴展確認狀態，t+1到n不確定。 目前裝入背包的物品總價用cp表示，因為還不確定t+1到n物品的狀態，先假設全部都放入背包，也就是剩餘的總價值，用rp表示。 cp + rp是所有從root出發經過中間節點z的可行解的價值上界。如果價值上界小於或等於目前的最優值，則說明節點z沒有繼續搜尋的必要 即 cp + rp &gt; bestp    solution 假設有4個物品，每個物品w [2,5,4,2], 價值v [6,3,5,4], W = 10
 初始化：sumw , sumv 統計所有物品的總重和總價 -&gt; sumw = 13, sumw = 18,目前放入背包的物品重量cw = 0, 總價cp = 0, 最優值 bestp = 0 第一層：t = 1,   判斷cw + w[1] = 2 &lt; W （滿足限制條件）向左擴展分支，令x[1] = 1, cw = cw + w[1] = 2, cp = cp+v[1] = 6，生成2好節點]]></description>
</item><item>
    <title>Linux Chapter 21 Signal 處理常式</title>
    <link>http://chinyu1229.github.io/2021-06-02-linux_chapter_21_signal%E8%99%95%E7%90%86%E5%B8%B8%E5%BC%8F/</link>
    <pubDate>Wed, 02 Jun 2021 22:10:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-06-02-linux_chapter_21_signal%E8%99%95%E7%90%86%E5%B8%B8%E5%BC%8F/</guid>
    <description><![CDATA[Linux Chapter 21 Signal 處理常式 訊號處理常式設計  設定一個全域flag，接著離開。主程式會週期性的檢測此flag，若有被設定為flag，會進行適當的反應 會做出幾種類型的清理動作，接著結束行程或使用非區域跳躍（nonlocal goto）解開unwind the stack，並將控制權交回給主程式（是先定義的位置）  可重入函式與非同步訊號安全函式 可重入與不可重入 訊號處理常式與multiple thread的概念有關，前者可能會在任意時間點非同步的中斷程式執行，所以主程式與訊號處理常式會變成在同一個行程中，2個獨立的thread(非同步執行) 若函式可以在同一個行程的各thread中同步且安全的執行，此函式稱為是可重入的（reentrant）
 SUSv3對可重入的定義是: 當兩條或多條thread呼叫函式時，即便是彼此互相交叉執行，也能保證效果與各thread以未定義順序呼叫時一致  若函式會更新全域或靜態的資料結構，可能就是不可重入的函式（只使用local變數的函式保證是可重入）。
 可能發生的情況： 若主程式在呼叫malloc()期間，受到一個同樣呼叫malloc()的訊號處理常式中斷，則此linklist可能會遭到破壞，因此malloc()的函式家族與使用這些函式的其他函式庫函式都是不可重入。 其他會傳回靜態配置的記憶體，也是不可重入的，crypt() getpwnam() gethostbyname() getservbyname() 函式的內部紀錄是使用靜態的資料結構也是不可重入的，例如scanf() printf()，他們會有緩衝的I/O更新內部資料結構，所以在訊號處理常式使用printf()也在主程式呼叫printf()，緩衝區的資料會交錯，導致得到非期望的輸出結果，甚至是整個程式crush  標準的非同步訊號安全函式（async-signal-safe functions）  指可以安全地從訊號處理常式進行呼叫。 當函式是reentrant函式，或是不會受到訊號處理常式中斷，可以稱函式為async-signal-safe function man page: https://man7.org/linux/man-pages//man7/signal-safety.7.html  在訊號處理常式內使用errno 因為可能會更新errno變數，會導致函式reentrant，因為可能會覆寫主程式之前呼叫函式設定的errno值。 所以可以先儲存errno的值，並在函式執行完畢之後，回存errno
1 2 3 4 5 6 7  void handler(int sig) { int sErrno; sErrno = errno; /* can execute a function that might modify errno */ errno = sErron; }   全域變數與sig_atomic_t資料型別 全域變數有reetrant問題，但有時需要在主程式與訊號處理常式之間共用全域變數，要能正確處理即可以保證安全。 常見的設計是：]]></description>
</item><item>
    <title>Linux Chapter 20 Signal 基本概念</title>
    <link>http://chinyu1229.github.io/2021-05-29-linux_chapter_20_signal-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
    <pubDate>Sat, 29 May 2021 23:10:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-05-29-linux_chapter_20_signal-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
    <description><![CDATA[Linux Chapter 20 Signal 基本概念 概念 signal 可以通知行程（process）有事件發生，也可以稱為軟體中斷，多數情況下都無法預測訊號抵達的時間。
行程可以送出訊號給另外一個行程，在此可以做為synchronization 或者 IPC 的技術。
訊號類型與預設行為 可以在signal(7)使用手冊列出訊號名稱，或是參考書上p.430 下圖列出簡易版訊號表： 改變訊號處置 Unix系統提供兩種 1.signal() 2. sigaction()
 signal()提供設定訊號的原始API 介面比sigaction()簡單 sigaction()是建立訊號處置常式首推的API signal() 是基於 sigaction()實作的函式  1 2 3  #include&lt;signal.h&gt;void (*signal(int sig, void (*handler)(int))); Return previous signal disposition on success,or SIG_ERR on error    handler可以用以下的值取代  SIG_DFL:將訊號處置 重新設定為預設值，適用於還原先前signal()呼叫改變的訊號處置 SIG_IGN:忽略該訊號，行程也不會知道有此訊號    訊號處理常式 範例：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  #include&lt;signal.]]></description>
</item><item>
    <title>Linux Chapter 5 - 檔案IO深入探討</title>
    <link>http://chinyu1229.github.io/2021-05-20-%E6%AA%94%E6%A1%88i_o%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%A8%8E/</link>
    <pubDate>Thu, 20 May 2021 17:40:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-05-20-%E6%AA%94%E6%A1%88i_o%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%A8%8E/</guid>
    <description><![CDATA[檔案I/O深入探討 原子與競速條件 以互斥的方式建立檔案 在open()中設定O_EXCL與O_CREAT可以在檔案已存在的時候回傳錯誤，確保process本身是檔案的建立者
將資料附加到檔案 當我們有多個process要增加資料到同一個檔案 會有下列這種寫法
1 2 3 4  if(lseek(fd,0,SEEK_END)==-1) errExit(&#34;lseek&#34;); if(write(fd, buf, len)!=len) fatal(&#34;Partial/failed write&#34;);   會有race condtion問題，第一個process在lseek()與write()之間被第二個相同的行程中斷，那兩個行程會在寫入之前將他們的file offset設定到相同位置，因此會產生互相覆蓋的現象
 為了避免此問題，必須讓移往檔案結尾下一個byte操作與寫入操作都是原子操作，我們可以使用O_APPENDflag達成  檔案操作控制 1 2 3  #include&lt;fcntl.h&gt;int fcntl(int fd, int cmd,...); Return value on success depends on cmd, returns -1 on error   用途之一是用來取得或修改access mode,以及一個開啟檔案的開啟檔案狀態flag 取得設定的cmd : F_GETFL
1 2 3  int flags, accessMode; flags = fcntl(fd, F_GETFL); if(flags == -1) errExit(&#34;fcntl&#34;);   可以使用 &amp; 操作去判斷目前的開啟檔案狀態flag]]></description>
</item><item>
    <title>Linux 嵌入式開發 – 並行開發—SystemV IPC</title>
    <link>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC-system-v-ipc/</link>
    <pubDate>Thu, 20 May 2021 01:12:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC-system-v-ipc/</guid>
    <description><![CDATA[Linux 嵌入式開發 &ndash; 並行開發&mdash; System V IPC System V IPC  包含共享內存、消息對列、和信號燈集 每個IPC對象有唯一的ID IPC對象創建後一直存在，直到被顯式的刪除（主動刪除） 每個IPC對象有一個關聯的KEY ipcs / ipcrm 實現進程間通訊  Key ftok 1 2 3  #include&lt;sys/types.h&gt;#include&lt;sys/ipc.h&gt;key_t ftok(const char *path,int proj_id);    成功時返回合法的key值，失敗時返回EOF path存在且可以被訪問文件的路徑 proj_id 用於生成key的數字，不能為0  範例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;sys/types.h&gt;#include&lt;sys/ipc.h&gt;#include&lt;unistd.h&gt; int main(int argc, char *argv[]) { key_t key; if((key = ftok(&#34;.&#34;,&#39;a&#39;)) == -1) { perror(&#34;key&#34;); exit(-1); } }   共享內存  是一種最高效的進程間通信方式，進程可以直接讀寫內存，而不需要任何數據的拷貝 在內核空間創建，可以被進程映射到用戶空間訪問，使用靈活 由於多個進程可以同時訪問共享內存，因此需要同步和互斥機制配合使用  使用步驟  創建/打開共享內存 映射共享內存，即把指定的共享內存映射到進程的地址空間用於訪問 讀寫共享內存 撤銷共享內存映射 刪除共享內存對象  創建 1 2 3  #include&lt;sys/ipc.]]></description>
</item><item>
    <title>Linux 嵌入式開發 – 並行開發—Unix進程間的通訊方式</title>
    <link>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC-unix%E9%80%B2%E7%A8%8B%E9%96%93%E7%9A%84%E9%80%9A%E8%A8%8A%E6%96%B9%E5%BC%8F/</link>
    <pubDate>Thu, 20 May 2021 01:11:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC-unix%E9%80%B2%E7%A8%8B%E9%96%93%E7%9A%84%E9%80%9A%E8%A8%8A%E6%96%B9%E5%BC%8F/</guid>
    <description><![CDATA[Linux 嵌入式開發 &ndash; 並行開發&mdash; Unix進程間的通訊方式 Process間通訊介紹 早期：
 pipe fifo signal  System V IPC
 share memory message queue semphore set  &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;本地通信↑
&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;本地/網路通信↓ Linux
 socket  無名管道  只能用於有親緣關係的進程之間的通信 單工的通信模式，具有固定的讀端和寫端 創建時返回兩個文件描述符，分別用於讀寫管道  創建 - pipe 1 2  #include&lt;unistd.h&gt;int pipe(int pfd[2]);    成功時返回0，失敗時返回EOF pfd 包含兩個元素的int 陣列，用來保存文件描述符 pfd[0]用於read管道，pfd[1]用於write管道  範例 子進程1和2分別往管道寫入字串，父進程讀管道內容並打印
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  #include&lt;stdio.]]></description>
</item><item>
    <title>Linux 嵌入式開發 – 並行開發—進程與線程</title>
    <link>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC%E9%80%B2%E7%A8%8B%E8%88%87%E7%B7%9A%E7%A8%8B/</link>
    <pubDate>Thu, 20 May 2021 01:10:12 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://chinyu1229.github.io/2021-05-20-linux-%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%96%8B%E7%99%BC-%E4%B8%A6%E8%A1%8C%E9%96%8B%E7%99%BC%E9%80%B2%E7%A8%8B%E8%88%87%E7%B7%9A%E7%A8%8B/</guid>
    <description><![CDATA[Linux 嵌入式開發 &ndash; 並行開發&mdash;進程與線程 Process概念  program  存放在disk上的指令和數據的有序集合（文件） 靜態的   process  執行一個program所分配的資源總稱 是program一次執行的總稱 動態的，包括創建，調度，執行，死亡 有獨立的地址空間 linux為每個進程創建task_struct    Process 內容 process - | 正文段 |&mdash;&mdash;&ndash; &mdash;&mdash;&mdash; | 用戶數據段 |&mdash;-program &mdash;&mdash;&mdash; | 系統數據段 |
Process control block  PID process user process status / priority file description table  Process 類型  交互進程：在shell下啟動，可在前臺/後台運行 批處理進程：和在終端無關，被提交到一個作業隊列中以便順序執行 守護進程：和終端無關，一直在後台運行  Process status  running / ready waiting  interrupt not interrupt   terminated : 收到signal後可以繼續運行 zombie ： pcb沒有被釋放  Thread  process在切換時系統開銷大 同一個process中的thread共享相同的空間 Linux 不區分thread process  特點  通常thread指的是共享地址空間的多個任務 大大提高了任務切換的效率 避免額外的TLB &amp; cache的刷新  thread共享：]]></description>
</item></channel>
</rss>
